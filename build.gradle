buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
	
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        
    }

}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'

repositories {
	mavenCentral()
	
}


sourceCompatibility = 1.8
targetCompatibility = 1.8



configurations {
	compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {

	compile (

		//Common & Logging
		'org.apache.commons:commons-io:1.3.2',
		'org.apache.commons:commons-lang3:3.1',
		'org.apache.logging.log4j:log4j-api:2.1',
		'org.apache.logging.log4j:log4j-core:2.1',
		'com.lmax:disruptor:3.3.0',
		'org.apache.logging.log4j:log4j-1.2-api:2.2',
		'commons-lang:commons-lang:2.6',
		'commons-codec:commons-codec:1.10',

		//Core Java & Gnip
		'javax:javaee-api:7.0',
		
		//Json
		'net.sf.json-lib:json-lib:2.4:jdk15',

		//DB libraries
		'org.apache.commons:commons-pool2:2.0',
		'mysql:mysql-connector-java:5.1.26',
		'org.apache.tomcat:tomcat-jdbc:8.0.14',
		'org.apache.tomcat:tomcat-juli:8.0.14',
		'org.springframework:spring-jdbc:3.2.5.RELEASE',

		//Influx
		'org.influxdb:influxdb-java:2.8',

		//Time
		'joda-time:joda-time:2.3',

		//Json
		'org.json:json:20090211',

		//Swagger
		'io.springfox:springfox-swagger2:2.3.1',
		'io.springfox:springfox-swagger-ui:2.3.1',


		//Jackson
   		'org.apache.httpcomponents:httpclient:4.5.2',
   		'org.codehaus.jackson:jackson-core-asl:1.9.13',
   		'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13',
   		
   		//Ehcache
   		"net.sf.ehcache:ehcache:2.9.0",
   		"org.springframework.boot:spring-boot-starter-cache"


)

	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")

	//Jetty
	compile("org.springframework.boot:spring-boot-starter-web:1.3.0.RELEASE")
	compile("org.springframework.boot:spring-boot-starter-jetty:1.3.0.RELEASE")

    testCompile("junit:junit")
	compile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.skyscreamer:jsonassert:1.2.3")

	compile fileTree(dir: 'libs', include: ['*.jar'])


}





allprojects {
	apply from: "$rootDir/gradle/versioning.gradle"
}

jar {
manifest {
        attributes 		"RK-Implementation-Title": "Time Series API",
						"RK-Implementation-Version": version,
						"RK-Implementation-Timestamp": new Date(),
						"RK-Version":compVersion
    }

	from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
		exclude "META-INF/license/LICENSE.*.txt"
	}
}



eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}


task zip(type: Zip, dependsOn: bootRepackage) {
	appendix = 'release'
	from('build/libs') {
		into('lib')
	}
	from('src/dist/bin/') {
		fileMode = 0755
		include '**/*.sh'
		into('bin')
	}

	from('src/dist/conf/') {
		fileMode = 0755
		include '**/*.sh'
		into('conf')
	}


	archiveName "timeseriesapi.zip"
}


build.dependsOn(zip)
def zipFile = file('build/distributions/timeseriesapi.zip')


artifacts {
	archives jar
	 archives zipFile
}

uploadArchives {
	repositories {
		
	}
}


    
  
    
